-- DIM Tables

-- ************************************** shipping_dim
DROP TABLE IF EXISTS shipping_dim cascade ; --anoshin quote: "cascade удаляет все объекты с нейсвязанные. В нашем случае - это constrait-ы"
CREATE TABLE IF NOT EXISTS shipping_dim
(
 ship_id   int NOT NULL, --Ещё один пример генерации id: ship_id_2   int GENERATED ALWAYS AS IDENTITY,
 ship_mode varchar(14) NOT NULL
);

--clean table
truncate table shipping_dim;

--insert values + generate_id
insert into shipping_dim (ship_id, ship_mode)
select
	100+row_number() over(),
	ship_mode
from (select distinct ship_mode from orders) a;


-- ************************************** product_dim
DROP TABLE IF EXISTS product_dim;
CREATE TABLE IF NOT EXISTS product_dim
(
 product_id   varchar(15) NOT NULL,
 category     varchar(15) NOT NULL,
 subcategory  varchar(11) NOT NULL,
 segment      varchar(11) NOT NULL,
 product_name varchar(150) NOT NULL
);

--clean table
truncate table product_dim;

--insert values from orders
insert into product_dim (product_id, category, subcategory, segment, product_name)
select distinct
	product_id,
	category,
	subcategory,
	segment,
	product_name
from orders o
;

-- ************************************** geography_dim
DROP TABLE IF EXISTS geography_dim;
CREATE TABLE IF NOT EXISTS geography_dim
(
 geo_id      int GENERATED ALWAYS AS IDENTITY, --Начиная с PostgreSQL 10, появилась возможность объявления идентифицирующего столбца (GENERATED AS IDENTITY), соответствующего стандарту SQL:2003. В варианте GENERATED BY DEFAULT поведение эквивалентно serial, а вот с GENERATED ALWAYS все интереснее:
 country     varchar(13) NOT NULL,
 city        varchar(17) NOT NULL,
 state       varchar(20) NOT NULL,
 postal_code varchar(5) NULL, --убрал NOT null, т.к. были null в исходнике
 region      varchar(7) NOT NULL
);


--clean table
truncate table geography_dim;

--insert values from orders
insert into geography (country, city, state, postal_code, region)

select distinct
	 country,
	 city,
	 state, 
	 postal_code,
	 region
from orders o
;



-- ************************************** customer_dim
DROP TABLE IF EXISTS customer_dim;
CREATE TABLE IF NOT EXISTS customer_dim
(
 customer_id   varchar(8) NOT NULL,
 customer_name varchar(22) NOT NULL
);

--clean table
truncate table customer_dim;

--insert values from orders
insert into customer_dim (customer_id, customer_name)

select distinct
	 customer_id,
	 customer_name
from orders o
;



-- ************************************** calendar_dim
DROP TABLE IF EXISTS calendar_dim;
CREATE TABLE IF NOT EXISTS calendar_dim
(
 order_date date NOT NULL,
 ship_date  date NOT NULL,
 year       int NOT NULL,
 quarter    varchar(5) NOT NULL,
 month      int NOT NULL,
 week       int NOT NULL,
 week_day   int NOT NULL

);



